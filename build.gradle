plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.mk'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {\
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

	// apache api
	implementation 'org.apache.poi:poi-ooxml:5.2.3'
	implementation 'org.apache.poi:poi:5.2.3'
	implementation 'org.apache.commons:commons-collections4:4.4'

	// flyway
	implementation 'org.flywaydb:flyway-mysql'

	// 쿼리 파라미터 로그
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

	// Swagger 설정 spring-doc
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.5'

	//Querydsl 추가
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.4'

	//testcontainers 추가
	testImplementation 'org.testcontainers:testcontainers'
	testImplementation 'org.testcontainers:mysql'
	testImplementation 'org.testcontainers:junit-jupiter'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	compileOnly 'org.projectlombok:lombok'

	runtimeOnly 'com.mysql:mysql-connector-j'

	annotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
	useJUnitPlatform()
	doFirst {
		def envFile = new File('.env')
		if (envFile.exists()) {
			envFile.eachLine { line ->
				def (key, value) = line.split('=')
				if (key && value) {
					environment key.trim(), value.trim()
					println "Loaded environment variable: ${key.trim()} = ${value.trim()}"
				}
			}
		}
	}
}

clean {
	delete file('src/main/generated')
}